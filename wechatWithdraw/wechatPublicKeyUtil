package com.xindai.impl.wechat.utils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.xindai.utils.ConfigPropertyConfigurer;
import com.xindai.utils.XMLUtils;

/**
 * 读取公钥，将公钥放入本地磁盘中后需要转PKCS#8（默认获取到的格式为PKCS#1）
 * 提现到银行卡时需要此功能
 * 
 * @author raohui
 *
 */
public class wechatPublicKeyUtil {
	
	private static final Logger log = LoggerFactory.getLogger(wechatPublicKeyUtil.class);

	public static void savePublicKey() {

		// 商户ID
		String mchId = ConfigPropertyConfigurer.getContextProperty("mchId");
		// 商户密钥
		String mchKey = ConfigPropertyConfigurer.getContextProperty("mchKey");
		// 请求地址
		String url = "https://fraud.mch.weixin.qq.com/risk/getpublickey";
		// 证书地址
		String certificatePath = ConfigPropertyConfigurer.getContextProperty("certificatePath");
		Map<String, String> xmlData = new HashMap<>();
		xmlData.put("mch_id", mchId);
		xmlData.put("nonce_str", UUID.randomUUID().toString().replace("-", "").toUpperCase());
		xmlData.put("sign", wechatSignatrueUtil.wechatSginatrueToMD5(xmlData, mchKey));
		xmlData.put("sign_type", "MD5");
		String xmlObj = XMLUtils.ArrayToXml(xmlData);
		try {
			Map<String, String> result = wechatHttpsUtil.wechatPostToXml(mchId, url, xmlObj, certificatePath);
			if (result != null && result.get("return_code").equals("SUCCESS")) {
				if (result.get("result_code").equals("SUCCESS")) {
					String pubKey = (String) result.get("pub_key");
					File file = new File(ConfigPropertyConfigurer.getContextProperty("public_key_path"));
					String absolutePath = file.getAbsolutePath();
					System.out.println("绝对路径---------" + absolutePath);
					Path path = Paths.get(absolutePath);
					try {
						BufferedWriter writer = Files.newBufferedWriter(path);
						writer.write(pubKey);
						writer.close();
					} catch (IOException i) {
						System.out.println("写入数据错误-----:" + i.toString());
					}
				}
			}
		} catch (Exception e) {
			System.out.println("错误,错误信息:" + e.toString());
		}
	}
	
	public static String getPublicKey(){
		File file = new File(ConfigPropertyConfigurer.getContextProperty("public_key_path"));
		String url = file.getAbsolutePath();
		StringBuffer sb = new StringBuffer();
		try {
			List<String> lines = Files.readAllLines(Paths.get(url), StandardCharsets.UTF_8);
			for (String line : lines) {
				if (line.charAt(0) == '-') {
	                continue;
	            } else {
	                sb.append(line);
	                sb.append('\r');
	            }
			}
		} catch (IOException e) {
			log.error("读取错误------:" + e.toString());
			System.out.println("读取错误------:" + e.toString());
			e.printStackTrace();
		}
		return sb.toString();
	}
}
